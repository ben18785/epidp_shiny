)
})
# Display error message if data is invalid (only after a file is uploaded)
output$errorMessage <- renderText({
data <- dataInput()
if (is.null(input$file1)) {
return("")
} else if (is.null(data)) {
return("Error: The uploaded file must contain 'date' and 'cases' columns.")
} else {
return("")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Install necessary packages if not already installed
# install.packages("shiny")
# install.packages("ggplot2")
# install.packages("readr")
# install.packages("dplyr")
# install.packages("scales") # For using percent formatting
library(shiny)
library(ggplot2)
library(readr)
library(dplyr)
library(scales)
library(epidp)
# Define UI for the application
ui <- fluidPage(
img(src = "epidp.png", height = "100px", width = "100px"),
titlePanel("epidp: Rt estimation"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
uiOutput("rtMethodUI"),  # Rt estimation method selector appears after file upload
sliderInput("mean", "Adjust Serial Interval Mean:",
min = 1, max = 25, value = 6.5),
sliderInput("sd", "Adjust Serial Interval Standard Deviation",
min = 1, max = 50, value = 4.03)
),
mainPanel(
plotOutput("gammaPlot"),
plotOutput("casesPlot"),
uiOutput("rtPlotUI"),  # Placeholder for the Rt plot UI
textOutput("errorMessage")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive function to read the uploaded file and handle errors
dataInput <- reactive({
# Ensure a file is uploaded before processing
if (is.null(input$file1)) {
return(NULL)
}
inFile <- input$file1
data <- tryCatch({
read_csv(inFile$datapath)
}, error = function(e) {
return(NULL)  # Handle error without throwing error messages early
})
# Check if the necessary columns are present
if (!is.null(data) && !all(c("date", "cases") %in% colnames(data))) {
return(NULL)  # If the necessary columns are missing, return NULL
}
# Convert date column to Date type
if (!is.null(data)) {
data <- data %>%
mutate(date = as.Date(date))
}
return(data)
})
# Conditional UI for Rt estimation method, shown after a valid CSV is uploaded
output$rtMethodUI <- renderUI({
req(dataInput())  # Ensure that data is uploaded
selectInput("rtMethod", "Rt Estimation Method",
choices = c("optimise", "sample"))
})
# Plot of the Discrete Gamma distribution PMF
output$gammaPlot <- renderPlot({
req(input$mean, input$sd)  # Ensure sliders are set
# Create x values representing days
x_vals <- 1:15  # Adjust x values to 30 days
# Calculate the shape and rate parameters for the Gamma distribution
shape <- (input$mean / input$sd)^2  # Shape parameter
rate <- input$mean / (input$sd^2)   # Rate parameter
# Compute the CDF for consecutive days
gamma_cdf <- pgamma(x_vals, shape = shape, rate = rate)
gamma_pmf <- diff(c(0, gamma_cdf))  # Compute the discrete PMF as differences of CDF
# Create ggplot for the Discrete Gamma distribution PMF
ggplot(data = data.frame(x = x_vals, y = gamma_pmf), aes(x = x, y = y)) +
geom_bar(stat = "identity", fill = "black", alpha = 0.7) +
labs(title = "Discrete Gamma Distribution PMF",
x = "Days",
y = "Probability Mass") +
scale_x_continuous(breaks = seq(0, 15, 5)) + # X-axis for 30 days
scale_y_continuous(labels = percent_format()) + # Format y-axis as percentages
theme(
text=element_text(size=16)
)
})
# Plot of the raw cases over time
output$casesPlot <- renderPlot({
data <- tryCatch({
dataInput()
}, error = function(e) {
NULL
})
req(!is.null(data))  # Stop if data is NULL
# Create ggplot of raw cases
ggplot(data, aes(x = date, y = cases)) +
geom_line(color = "black") +
labs(title = "Raw Cases Over Time",
x = "Date",
y = "Cases") +
theme(
text=element_text(size=16)
)
})
# Rt estimation (optimisation method)
estimateRt <- reactive({
req(input$rtMethod == "optimise")  # Run only if "optimise" is selected
data <- tryCatch({
dataInput()
}, error = function(e) {
NULL
})
req(!is.null(data))  # Stop if data is NULL
# Placeholder estimation for Rt over time (you can replace this with a real method)
# rt_estimates <- runif(n = nrow(data), min = 0.8, max = 1.5)  # Random Rt values for demo
w <- generate_vector_serial(nrow(data), input$mean, input$sd)
fit <- fit_epifilter(
nrow(data),
data$cases,
w=w,
is_sampling = FALSE,
as_vector=FALSE
)
data$Rt <- fit$par$R
return(data)
})
# Show the Rt plot only when "optimise" is selected
output$rtPlotUI <- renderUI({
if (input$rtMethod == "optimise") {
plotOutput("rtPlot")
}
})
# Rt plot
output$rtPlot <- renderPlot({
req(!is.null(data))  # Stop if data is NULL
rt_data <- estimateRt()
req(rt_data)
ggplot(rt_data, aes(x = date, y = Rt)) +
geom_hline(yintercept = 1, linetype = 2,
colour="orange", size=2) +
geom_line(color = "black") +
labs(title = "Estimated Rt Over Time",
x = "Date",
y = "Rt") +
theme(
text=element_text(size=16)
)
})
# Display error message if data is invalid (only after a file is uploaded)
output$errorMessage <- renderText({
data <- dataInput()
if (is.null(input$file1)) {
return("")
} else if (is.null(data)) {
return("Error: The uploaded file must contain 'date' and 'cases' columns.")
} else {
return("")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd("~/Documents/GitHub/epidp_shiny")
# Install necessary packages if not already installed
# install.packages("shiny")
# install.packages("ggplot2")
# install.packages("readr")
# install.packages("dplyr")
# install.packages("scales") # For using percent formatting
library(shiny)
library(ggplot2)
library(readr)
library(dplyr)
library(scales)
library(epidp)
# Define UI for the application
ui <- fluidPage(
img(src = "epidp.png", height = "100px", width = "100px"),
titlePanel("epidp: Rt estimation"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
uiOutput("rtMethodUI"),  # Rt estimation method selector appears after file upload
sliderInput("mean", "Adjust Serial Interval Mean:",
min = 1, max = 25, value = 6.5),
sliderInput("sd", "Adjust Serial Interval Standard Deviation",
min = 1, max = 50, value = 4.03)
),
mainPanel(
plotOutput("gammaPlot"),
plotOutput("casesPlot"),
uiOutput("rtPlotUI"),  # Placeholder for the Rt plot UI
textOutput("errorMessage")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive function to read the uploaded file and handle errors
dataInput <- reactive({
# Ensure a file is uploaded before processing
if (is.null(input$file1)) {
return(NULL)
}
inFile <- input$file1
data <- tryCatch({
read_csv(inFile$datapath)
}, error = function(e) {
return(NULL)  # Handle error without throwing error messages early
})
# Check if the necessary columns are present
if (!is.null(data) && !all(c("date", "cases") %in% colnames(data))) {
return(NULL)  # If the necessary columns are missing, return NULL
}
# Convert date column to Date type
if (!is.null(data)) {
data <- data %>%
mutate(date = as.Date(date))
}
return(data)
})
# Conditional UI for Rt estimation method, shown after a valid CSV is uploaded
output$rtMethodUI <- renderUI({
req(dataInput())  # Ensure that data is uploaded
selectInput("rtMethod", "Rt Estimation Method",
choices = c("optimise", "sample"))
})
# Plot of the Discrete Gamma distribution PMF
output$gammaPlot <- renderPlot({
req(input$mean, input$sd)  # Ensure sliders are set
# Create x values representing days
x_vals <- 1:15  # Adjust x values to 30 days
# Calculate the shape and rate parameters for the Gamma distribution
shape <- (input$mean / input$sd)^2  # Shape parameter
rate <- input$mean / (input$sd^2)   # Rate parameter
# Compute the CDF for consecutive days
gamma_cdf <- pgamma(x_vals, shape = shape, rate = rate)
gamma_pmf <- diff(c(0, gamma_cdf))  # Compute the discrete PMF as differences of CDF
# Create ggplot for the Discrete Gamma distribution PMF
ggplot(data = data.frame(x = x_vals, y = gamma_pmf), aes(x = x, y = y)) +
geom_bar(stat = "identity", fill = "black", alpha = 0.7) +
labs(title = "Discrete Gamma Distribution PMF",
x = "Days",
y = "Probability Mass") +
scale_x_continuous(breaks = seq(0, 15, 5)) + # X-axis for 30 days
scale_y_continuous(labels = percent_format()) + # Format y-axis as percentages
theme(
text=element_text(size=16)
)
})
# Plot of the raw cases over time
output$casesPlot <- renderPlot({
data <- tryCatch({
dataInput()
}, error = function(e) {
NULL
})
req(!is.null(data))  # Stop if data is NULL
# Create ggplot of raw cases
ggplot(data, aes(x = date, y = cases)) +
geom_line(color = "black") +
labs(title = "Raw Cases Over Time",
x = "Date",
y = "Cases") +
theme(
text=element_text(size=16)
)
})
# Rt estimation (optimisation method)
estimateRt <- reactive({
req(input$rtMethod == "optimise")  # Run only if "optimise" is selected
data <- tryCatch({
dataInput()
}, error = function(e) {
NULL
})
req(!is.null(data))  # Stop if data is NULL
# Placeholder estimation for Rt over time (you can replace this with a real method)
# rt_estimates <- runif(n = nrow(data), min = 0.8, max = 1.5)  # Random Rt values for demo
w <- generate_vector_serial(nrow(data), input$mean, input$sd)
fit <- fit_epifilter(
nrow(data),
data$cases,
w=w,
is_sampling = FALSE,
as_vector=FALSE
)
data$Rt <- fit$par$R
return(data)
})
# Show the Rt plot only when "optimise" is selected
output$rtPlotUI <- renderUI({
if (input$rtMethod == "optimise") {
plotOutput("rtPlot")
}
})
# Rt plot
output$rtPlot <- renderPlot({
req(!is.null(data))  # Stop if data is NULL
rt_data <- estimateRt()
req(rt_data)
ggplot(rt_data, aes(x = date, y = Rt)) +
geom_hline(yintercept = 1, linetype = 2,
colour="orange", size=2) +
geom_line(color = "black") +
labs(title = "Estimated Rt Over Time",
x = "Date",
y = "Rt") +
theme(
text=element_text(size=16)
)
})
# Display error message if data is invalid (only after a file is uploaded)
output$errorMessage <- renderText({
data <- dataInput()
if (is.null(input$file1)) {
return("")
} else if (is.null(data)) {
return("Error: The uploaded file must contain 'date' and 'cases' columns.")
} else {
return("")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Install necessary packages if not already installed
# install.packages("shiny")
# install.packages("ggplot2")
# install.packages("readr")
# install.packages("dplyr")
# install.packages("scales") # For using percent formatting
library(shiny)
library(ggplot2)
library(readr)
library(dplyr)
library(scales)
library(epidp)
# Define UI for the application
ui <- fluidPage(
img(src = "epidp.png", height = "100px", width = "100px"),
titlePanel("epidp: Rt estimation"),
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
uiOutput("rtMethodUI"),  # Rt estimation method selector appears after file upload
sliderInput("mean", "Adjust Serial Interval Mean:",
min = 1, max = 25, value = 6.5),
sliderInput("sd", "Adjust Serial Interval Standard Deviation",
min = 1, max = 50, value = 4.03)
),
mainPanel(
plotOutput("gammaPlot"),
plotOutput("casesPlot"),
uiOutput("rtPlotUI"),  # Placeholder for the Rt plot UI
textOutput("errorMessage")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive function to read the uploaded file and handle errors
dataInput <- reactive({
# Ensure a file is uploaded before processing
if (is.null(input$file1)) {
return(NULL)
}
inFile <- input$file1
data <- tryCatch({
read_csv(inFile$datapath)
}, error = function(e) {
return(NULL)  # Handle error without throwing error messages early
})
# Check if the necessary columns are present
if (!is.null(data) && !all(c("date", "cases") %in% colnames(data))) {
return(NULL)  # If the necessary columns are missing, return NULL
}
# Convert date column to Date type
if (!is.null(data)) {
data <- data %>%
mutate(date = as.Date(date))
}
return(data)
})
# Conditional UI for Rt estimation method, shown after a valid CSV is uploaded
output$rtMethodUI <- renderUI({
req(dataInput())  # Ensure that data is uploaded
selectInput("rtMethod", "Rt Estimation Method",
choices = c("optimise", "sample"))
})
# Plot of the Discrete Gamma distribution PMF
output$gammaPlot <- renderPlot({
req(input$mean, input$sd)  # Ensure sliders are set
# Create x values representing days
x_vals <- 1:15  # Adjust x values to 30 days
# Calculate the shape and rate parameters for the Gamma distribution
shape <- (input$mean / input$sd)^2  # Shape parameter
rate <- input$mean / (input$sd^2)   # Rate parameter
# Compute the CDF for consecutive days
gamma_cdf <- pgamma(x_vals, shape = shape, rate = rate)
gamma_pmf <- diff(c(0, gamma_cdf))  # Compute the discrete PMF as differences of CDF
# Create ggplot for the Discrete Gamma distribution PMF
ggplot(data = data.frame(x = x_vals, y = gamma_pmf), aes(x = x, y = y)) +
geom_bar(stat = "identity", fill = "black", alpha = 0.7) +
labs(title = "Discrete Gamma Distribution PMF",
x = "Days",
y = "Probability Mass") +
scale_x_continuous(breaks = seq(0, 15, 5)) + # X-axis for 30 days
scale_y_continuous(labels = percent_format()) + # Format y-axis as percentages
theme(
text=element_text(size=16)
)
})
# Plot of the raw cases over time
output$casesPlot <- renderPlot({
data <- tryCatch({
dataInput()
}, error = function(e) {
NULL
})
req(!is.null(data))  # Stop if data is NULL
# Create ggplot of raw cases
ggplot(data, aes(x = date, y = cases)) +
geom_line(color = "black") +
labs(title = "Raw Cases Over Time",
x = "Date",
y = "Cases") +
theme(
text=element_text(size=16)
)
})
# Rt estimation (optimisation method)
estimateRt <- reactive({
req(input$rtMethod == "optimise")  # Run only if "optimise" is selected
data <- tryCatch({
dataInput()
}, error = function(e) {
NULL
})
req(!is.null(data))  # Stop if data is NULL
# Placeholder estimation for Rt over time (you can replace this with a real method)
# rt_estimates <- runif(n = nrow(data), min = 0.8, max = 1.5)  # Random Rt values for demo
w <- generate_vector_serial(nrow(data), input$mean, input$sd)
fit <- fit_epifilter(
nrow(data),
data$cases,
w=w,
is_sampling = FALSE,
as_vector=FALSE
)
data$Rt <- fit$par$R
return(data)
})
# Show the Rt plot only when "optimise" is selected
output$rtPlotUI <- renderUI({
if (input$rtMethod == "optimise") {
plotOutput("rtPlot")
}
})
# Rt plot
output$rtPlot <- renderPlot({
req(!is.null(data))  # Stop if data is NULL
rt_data <- estimateRt()
req(rt_data)
ggplot(rt_data, aes(x = date, y = Rt)) +
geom_hline(yintercept = 1, linetype = 2,
colour="orange", size=2) +
geom_line(color = "black") +
labs(title = "Estimated Rt Over Time",
x = "Date",
y = "Rt") +
theme(
text=element_text(size=16)
)
})
# Display error message if data is invalid (only after a file is uploaded)
output$errorMessage <- renderText({
data <- dataInput()
if (is.null(input$file1)) {
return("")
} else if (is.null(data)) {
return("Error: The uploaded file must contain 'date' and 'cases' columns.")
} else {
return("")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
